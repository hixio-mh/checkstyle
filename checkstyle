#!/bin/bash

# libjpeg-turbo Style Checker, or
# How I Learned to Stop Worrying and Love Regular Expressions
#
# Copyright (C)2018 D. R. Commander.  All Rights Reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# - Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# - Neither the name of the libjpeg-turbo Project nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS",
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# TODO: Detect C++-style comments

SCRIPTDIR=`dirname $0`
# Move along.  Nothing to format here.
FILES='./* :!ci/ :!doc/ :!java/doc/ :!*.jpg :!*.ppm :!*.bmp :!*.icc :!*.rtf'

echo

echo '********** DETECTING WHITESPACE ERRORS **********'

echo '---------- Tab characters ----------'
echo
git grep -E $'\t' -- $FILES ':!doxygen-extra.css' ':!release/' ':!/*.in'
echo

echo '---------- Alt-Space ----------'
echo
git grep 'Â ' -- $FILES
echo

echo '---------- Blank line(s) at top of file ----------'
echo
git ls-files -- $FILES | while read file; do
	MATCH=`head -n1 $file | grep -E '^[ '$'\t]*$'`
	if [ $? = 0 ]; then
			echo $file: $MATCH
	fi
done
echo

echo '---------- General whitespace errors ----------'
echo
git diff --check $(git rev-list HEAD | tail -n 1) -- $FILES |
	grep -v 'README.md:27: leftover conflict marker'
echo

echo # ************************************************************************


echo '********** DETECTING C++-style COMMENTS **********'
echo
git grep -P '(?<!http:)(?<!https:)(?<!ftp:)(?<!file:)\/\/' -- $FILES ':!simd/mips/*.S' ':!simd/jsimdcfg.inc.h' ':!*.java' ':!/*.in'
echo

echo # ************************************************************************


echo '********** DETECTING BAD LINE CONTINUATION SPACING **********'

echo '---------- More than two spaces ----------'
echo
git grep -P '[^ ]+  [ ]*\\$' -- $FILES
echo

echo '---------- No spaces ----------'
echo
git grep -E '[^ ]+\\$' -- $FILES
echo

echo # ************************************************************************


echo '********** DETECTING UNATTACHED else **********'
echo
git ls-files -- $FILES | while read file; do
	pcregrep -H -M '[^{]}\n[ ]*else' $file
done
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT BRACKET SPACING **********'

echo '---------- #define something() \[\n]{ \ ----------'
echo
git grep -E '^[ ]*\{[ ]*\\$' -- $FILES
echo

echo '---------- {something ----------'
echo
EXCLEXPR='(?<!\$)(?<!ENV)(?<!mm[0-9]=)(?!{\+\-})(?!{[drq][0-9]+[,-}\[])(?!{v[0-9]+\.[0-9]*[bdhs])(?!{TMP1,)(?!{@link)'
git grep -P "$EXCLEXPR"'{[^ }]' -- $FILES ':!BUILDING.md' ':!java/README' ':!release/' |
	grep -v 'simd/nasm/.*:;'
echo

echo '---------- { something ... ----------'
echo
git grep -E '^[ ]*\{ [^\}]*$' -- $FILES
echo

echo '---------- something} ----------'
echo
EXCLEXPR='(?<!\.\.)'
git grep -P '[^ \-\]{@]'"$EXCLEXPR"'}' -- $FILES ':!BUILDING.md' ':!*CMakeLists.txt' ':!cmakescripts/' ':!java/README' ':!release/' ':!/*.in' |
	grep -vE '\.java:[ ]+\*[ ]+.*[^ ]}' |
	grep -vE '\.asm:.*;.*[^ ]}' |
	grep -vE 'simd\/loongson.*:.*\/\*.*[^ ]}.*\*\/' |
	grep -vE 'jsimd_neon.S:.*{([dqr][0-9]|v[0-9]+\.[0-9bdhs]+|TMP[0-9]).*}'
echo

echo '---------- ... something } ----------'
echo
# simd/i386/jquant-mmx.asm: 1 hit
EXCL=':!simd/i386/jquant-mmx.asm'
git grep -E '^[^{]+[^ ][ ]+}' -- $FILES $EXCL |
	grep -vE '\.asm:.*;.*[^{]+[^ ][ ]+}'
unset EXCL
echo

echo '---------- something{ ----------'
echo
EXCLEXPR='(?<!mm[0-9]=)(?<![\$|@])(?<!\ENV)(?!{@link)(?!{\+\-)'
git grep -P '[^ ]'"$EXCLEXPR"'{' -- $FILES ':!BUILDING.md' ':!java/README' ':!release/'
echo

echo '---------- }something ----------'
echo
git grep -E '}[^ ;\)\(,\.\[\<\"]' -- $FILES ':!BUILDING.md' ':!*CMakeLists.txt' ':!cmakescripts/' ':!release/' ':!/*.in' |
	grep -v 'simd/nasm/.*:;'
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT STATEMENT SPACING **********'

echo '---------- if( ----------'
echo
git grep -P '(?<!_g)if\(' -- $FILES ':!*CMakeLists.txt' ':!cmakescripts/'
echo

for statement in for else catch while do switch; do
	echo '---------- '$statement'( ----------'
	echo
	git grep -E $statement'\(' -- $FILES ':!*CMakeLists.txt' ':!cmakescripts/'
	echo
done
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT FUNCTION/TYPE CAST SPACING **********'

echo '---------- (type*) ----------'
echo
git grep -E '[^ \(\*]\*\)' -- $FILES ':!BUILDING.md' ':!release/'
echo

echo '---------- (type**) ----------'
echo
EXCLEXPR='(?<!xmm[0-9]=\([0-9A-F][0-9A-F]\*\*\))'
git grep -P '[^ \*]\*\*\)'"$EXCLEXPR" -- $FILES ':!BUILDING.md'
echo

echo '---------- [return ](type) var ----------'
echo
OP='([\=|\+|\-|\*|\/|\%|\<\<|\>\>|\&|\^|\||\!]\=|\+|\-|\/|\%|\>|\<|\&\&|\|\||\&|\||\^|\<\<|\>\>)'
EXCLEXPR='(?<!\(got\) \+ \(sym\) w)'
git grep -P '('$OP'[ ]+|^[ ]*|return[ ]*)\([^>\*\]]*\) [A-Za-z0-9_\(]'"$EXCLEXPR" -- $FILES ':!*.md' ':!README.ijg' ':!java/README' ':!*.txt' ':!*.1'
echo

echo '---------- ((type) var ... ----------'
echo
EXCLEXPR='(?<!#define F_0_[0-9][0-9][0-9] \(\(short\))'
# simd/loongson/jccolor-mmi.c: 2 hits
EXCL=':!simd/loongson/jccolor-mmi.c'
git grep -P '[^\*][ A-Za-z0-9\*][\(\-]\([^\*][^>!=&]*\)'"$EXCLEXPR"' [A-Za-z0-9_\(]' -- $FILES ':!*.md' ':!*.1' ':!*.cmake' ':!CMakeLists.txt' $EXCL
unset EXCL
echo

echo '---------- (*cinfo->something->method)(args) ----------'
echo
git grep -E '\(\*[^ ]*\)\(' -- $FILES
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT MACRO SPACING **********'
echo
EXCLEXPR='(?!#define PACK_SHORT_565_[LB]E)(?!#define JCOPYRIGHT)(?!#define le32toh)(?!#define GET_2B)(?!#define REF_1D_IDCT)(?!#define _uint64_set_pi16)(?!#define _uint64_set_pi32)(?!#define get_const_value)(?!#define LEAF_MIPS32R2)(?!#define END)'
git ls-files -- $FILES | while read file; do
	pcregrep -H -M "$EXCLEXPR"'#define.*\\\n   [ ]*[^ ]*' $file
done
# #define  something
git grep -E '^[#%]define  [ ]*[^ ]' -- $FILES
# #define something(...) something
git grep -E '^[#%]define [A-Za-z0-9_]+\([^\(\)]+\) [^ \\{]' -- $FILES
# #define something something
git grep -E '^[#%]define [^\(\) ]+ [^ \\{\/]' -- $FILES ':!java/org_libjpegturbo_turbojpeg_TJ.h' ':!release/rpm.spec.in' ':!win/jsimdcfg.inc'
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT COMMA SPACING **********'

echo '---------- [ ], ----------'
echo
git grep -P '[ ],' -- $FILES
echo

echo '---------- ,something ----------'
EXCLEXPR='(?!.*\"[^\"]+$)'
# jquant1.c: 16 hits
EXCL=":!jquant1.c"
git grep -P ',[^ \"]'"$EXCLEXPR" -- $FILES ':!*.c' ':!*.h' ':!*.S' ':!*CMakeLists.txt' ':!*.1' ':!*.txt' ':!release/rpm.spec.in' |
	grep -vE '\.asm:.*;.*,[^ \"]' |
	grep -vE 'simd/nasm/.*:.*;.*,[^ \"]' |
	grep -vE '\.asm:.* \[[A-Z]+\(.*\)\]'
# Process C and GAS files separately, so we can parse out the comments
git ls-files -- '*.c' '*.h' '*.S' $EXCL | while read file; do
	"$SCRIPTDIR/remcomms.sh" $file | pcregrep -n "[^\'],[^ \'\)]""$EXCLEXPR" && echo $file matches
done
unset EXCL
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT OPERATOR SPACING **********'

echo '---------- type* var ----------'
echo
git grep -E '[^ \/\*}]\*[ ][!\]' -- $FILES ':!*.txt' ':!README.ijg' ':!*.cmake' ':!doxygen-extra.css' ':!*.c' ':!*.h' ':!*.S' |
	grep -vE '\.asm:;'
# Process C and GAS files separately, so we can parse out the comments
git ls-files -- '*.c' '*.h' '*.S' | while read file; do
	"$SCRIPTDIR/remcomms.sh" $file | grep -nE '[^ \/\*}]\*[ ]' && echo $file matches
done
echo

echo '---------- something= ----------'
echo
EXCLEXPR='(?!.*\"[^\"]+$)'
git grep -P '[A-Za-z0-9_][=]'"$EXCLEXPR" -- $FILES ':!*.yml' ':!*.md' ':!*.cmake' ':!*.1' ':!release/' ':!/*.in' ':!*.txt' ':!java/README' ':!*.c' ':!*.h' ':!*.S' |
	grep -vE '\.asm:.*;.*[A-Za-z0-9_][=]' |
	grep -vE 'simd\/nasm\/jsimdext.inc:%define SEG_'
# Process C and GAS files separately, so we can parse out the comments
git ls-files -- '*.c' '*.h' '*.S' | while read file; do
	"$SCRIPTDIR/remcomms.sh" $file | pcregrep -n '[A-Za-z0-9_][=]'"$EXCLEXPR" && echo $file matches
done
echo

echo '---------- =something ----------'
echo
EXCLEXPR='(?!.*\"[^\"]+$)'
git grep -P '[=][A-Za-z0-9_]'"$EXCLEXPR" -- $FILES ':!*.yml' ':!*.md' ':!*.cmake' ':!*.1' ':!release/' ':!/*.in' ':!*.txt'  ':!*.c' ':!*.h' ':!*.S' |
	grep -vE '\.asm:.*;.*[=][A-Za-z0-9_]' |
	grep -vE 'simd\/nasm\/jsimdext.inc:%define SEG_'
# Process C and GAS files separately, so we can parse out the comments
git ls-files -- '*.c' '*.h' '*.S' | while read file; do
	"$SCRIPTDIR/remcomms.sh" $file | pcregrep -n '[=][A-Za-z0-9_]'"$EXCLEXPR" && echo $file matches
done
echo

echo '---------- something{op} ----------'
echo
EXCLEXPR='(?!.*\"[^\"]+$)(?!2\.nolist 0xFFFF)(?!stack noalloc)'
OP='([\=|\+|\-|\*|\/|\%|\<\<|\>\>|\&|\^|\||\!]\=|\=|\+(?!\+)|(?<!\))\-(?![\>\-])|\*|\/|\%|(?<!\-)\>|\<|\&\&|\|\||(?<!\))\&|\||\^|\<\<|\>\>)'
git grep -P '[A-Za-z0-9_)]'$OP"$EXCLEXPR" -- $FILES ':!*.yml' ':!*.md' ':!*.txt' ':!Brewfile' ':!.gitattributes' ':!README.ijg' ':!change.log' ':!*.1' ':!*.cmake' ':!release/' ':!doxygen.config' ':!java/MANIFEST.MF' ':!java/README' ':!*.c' ':!*.h' ':!*.S' ':!*.java' ':!/*.in' |
	pcregrep -v 'simd.*(\.asm|\.inc):.*;.*[A-Za-z0-9_)]'$OP |
	pcregrep -v 'simd.*(\.asm|\.inc):    [^ ].*[A-Za-z0-9_)]'$OP |
	grep -vE 'simd\/nasm\/jsimdext.inc:%define SEG_'
# Process C and GAS files separately, so we can parse out the comments
EXCLEXPR='(?!.*\"[^\"]*$)(?!bit JSAMPLEs)(?!place in that buffer)'
git ls-files -- '*.c' '*.h' | while read file; do
	"$SCRIPTDIR/remcomms.sh" $file | pcregrep -n '^(?!#include).*[A-Za-z0-9_)]'$OP"$EXCLEXPR" && echo $file matches
done
EXCLEXPR='(?!.*\"[^\"]*$)'
git ls-files -- '*.S' | while read file; do
	"$SCRIPTDIR/remcomms.sh" $file | \
		pcregrep -n '^(?!#include).*[A-Za-z0-9_)]'$OP"$EXCLEXPR" | \
		grep -vE '[0-9]+:    [^ ]' && echo $file matches
done
echo

echo '---------- {op}something ----------'
echo
EXCLEXPR='(?!.*\"[^\"]+$)'
# NOTE: Can't check -something or %something effectively, because % prefixes
# NASM preprocessor directives and macro arguments and -something may simply
# be a negative constant.
OP='([\=|\+|\-|\*|\/|\%|\<\<|\>\>|\&|\^|\||\!]\=|\=|\+|\*|\/|\>|\<|\&\&|\|\||\&|\||\^|\<\<|\>\>)'
git grep -P $OP'[A-Za-z0-9_)]'"$EXCLEXPR" -- $FILES ':!*.yml' ':!*.md' ':!*.txt' ':!Brewfile' ':!.gitattributes' ':!README.ijg' ':!change.log' ':!*.1' ':!*.cmake' ':!release/' ':!doxygen.config' ':!java/MANIFEST.MF' ':!java/README' ':!*.c' ':!*.h' ':!*.S' ':!*.java' ':!/*.in' |
	pcregrep -v 'simd.*(\.asm|\.inc):.*;.*'$OP'[A-Za-z0-9_)]' |
	pcregrep -v 'simd.*(\.asm|\.inc):    [^ ].*'$OP'[A-Za-z0-9_)]' |
	grep -vE 'simd\/nasm\/jsimdext.inc:%define SEG_'
# Process C and GAS files separately, so we can parse out the comments
EXCLEXPR='(?!.*\"[^\"]*$)'
OP='([\=|\+|\-|\*|\/|\%|\<\<|\>\>|\&|\^|\||\!]\=|\=|(?<!\+)\+|\/|\%|(?<!\-)\>|\<|\&\&|\|\||(?<!\))\||\^|\<\<|\>\>)'
git ls-files -- '*.c' '*.h' | while read file; do
	"$SCRIPTDIR/remcomms.sh" $file | pcregrep -n '^(?!#include)(?!%define).*'$OP'[A-Za-z0-9_)]'"$EXCLEXPR" && echo $file matches
done
OP='([\=|\+|\-|\*|\/|\%|\<\<|\>\>|\&|\^|\||\!]\=|\=|\+|\*|\%|\/|\>|\<|\&\&|\|\||\&|\||\^|\<\<|\>\>)'
EXCLEXPR='(?!.*\"[^\"]*$)'
git ls-files -- '*.S' | while read file; do
	"$SCRIPTDIR/remcomms.sh" $file | \
		pcregrep -n '^(?!\.section).*'$OP'[A-Za-z0-9_)]'"$EXCLEXPR" | \
		grep -vE '[0-9]+:    [^ ]' && echo $file matches
done
echo

echo '---------- # [!|&] something ----------'
echo
git grep -P '([\=|\+|\-|\*|\/|\%|\<\<|\>\>|\&|\^|\||\!]\=|\=|\+(?!\+)|(?<!\))\-(?![\>\-])|\*|\/|\%|(?<!\-)\>|\<|\&\&|\|\||(?<!\))\&|\||\^|\<\<|\>\>|\,) [\&\!][ ]+[^ ]' -- $FILES ':!*.yml' ':!*.md' ':!README.ijg'
git grep -P '^[ ]*[\&\!][ ]+[^ ]' -- $FILES ':!*.md' ':!*.txt' ':!*.yml'
echo

echo '---------- - FIX* ----------'
echo
git grep -P '(\(|, )\- FIX'
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT OPERATOR CONTINUANCE **********'
OP='([\=|\+|\-|\*|\/|\%|\<\<|\>\>|\&|\^|\||\!]\=|\+|\-|\/|\%|\>|\<|\&\&|\|\||\&|\||\^|\<\<|\>\>)'
EXCLEXPR='(?!cinfo\-\>(in|out)_color_space [!=]= JCS_RGB)'
git grep -P '^[ ]*'$OP'[ ]+'"$EXCLEXPR" -- $FILES ':!*.md' ':!*.yml'  ':!structure.txt'
# No sane way to distinguish continued multiplication operator from continued
# comment, so strip comments.
git ls-files -- '*.c' '*.h' '*.S' ':!*.html' | while read file; do
	"$SCRIPTDIR/remcomms.sh" $file | grep -En '^[ ]*\*[ ]+' && echo $file matches
done
echo

echo # ************************************************************************


echo '********** DETECTING INCORRECT FUNCTION SPACING **********'
echo
EXCLEXPR='(?<!if \(.)(?<!return \(.)(?<!byte \(.)(?<!equ \(.)(?<!dd \(.)'
git grep -P '[A-Za-z0-9_] \([^\*]'"$EXCLEXPR" -- $FILES ':!*.md' ':!*.txt' ':!README.ijg' ':!*.yml' ':!change.log' ':!*.1' ':!cmakescripts/' ':!java/README' ':!*.c' ':!*.h' 'simd/jsimdcfg.inc.h' ':!*.S' ':!*.java*' ':!release/' ':!jconfig.h.in' |
	grep -vE '\.(asm|inc):.*;.*[A-Za-z0-9_] \([^\*]'
# Process C and GAS files separately, so we can parse out the comments
EXCLEXPR='(?!.*\"[^\"]*$)(?<!if \(.)(?<!return \(.)(?<!for \(.)(?<!while \(.)(?<!switch \(.)(?<!else \(.)(?<!\.short \(.)(?<!catch \(.)(?<!do \(.)'
git ls-files -- '*.c' '*.h' '*.S' ':!simd/jsimdcfg.inc.h' | while read file; do
	"$SCRIPTDIR/remcomms.sh" $file | \
	pcregrep -n '[A-Za-z0-9_] \([^\*]'"$EXCLEXPR" | \
	grep -vE '[0-9]+:#define ' && echo $file matches
done
echo
